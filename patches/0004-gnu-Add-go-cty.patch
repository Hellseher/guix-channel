From 21a7043fd4830c76086e282384771c6758265f66 Mon Sep 17 00:00:00 2001
From: Sharlatan Hellseher <sharlatanus@gmail.com>
Date: Sun, 12 Dec 2021 00:57:37 +0000
Subject: [PATCH 4/6] gnu: Add go-cty

* gnu/packages/golang.scm: (go-github-com-zclconf-go-cty): New variable.
---
 gnu/packages/golang.scm | 34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)

diff --git a/gnu/packages/golang.scm b/gnu/packages/golang.scm
index 566be61eec..2e5a766c7e 100644
--- a/gnu/packages/golang.scm
+++ b/gnu/packages/golang.scm
@@ -9012,3 +9012,37 @@ (define-public go-github-com-apparentlymart-go-textseg-autoversion
     (arguments
      '(#:unpack-path "github.com/apparentlymart/go-textseg/autoversion"
        #:import-path "github.com/apparentlymart/go-textseg/autoversion/textseg"))))
+
+(define-public go-github-com-zclconf-go-cty
+  (package
+    (name "go-github-com-zclconf-go-cty")
+    (version "1.10.0")
+    (source
+      (origin
+        (method git-fetch)
+        (uri (git-reference
+               (url "https://github.com/zclconf/go-cty")
+               (commit (string-append "v" version))))
+        (file-name (git-file-name name version))
+        (sha256
+          (base32 "0f9a6vy45gcx5pg5bnfs63manaqw80h7xzvmj3b80af38304zr71"))))
+    (build-system go-build-system)
+    (arguments
+     '(#:unpack-path "github.com/zclconf/go-cty"
+       #:import-path "github.com/zclconf/go-cty/cty"))
+    (native-inputs
+     `(("go-github-com-google-go-cmp-cmp" ,go-github-com-google-go-cmp-cmp)))
+    (propagated-inputs
+      `(("go-golang-org-x-text" ,go-golang-org-x-text)
+        ("go-github-com-vmihailenco-msgpack-v4"
+         ,go-github-com-vmihailenco-msgpack-v4)
+        ("go-github-com-apparentlymart-go-textseg-v13"
+         ,go-github-com-apparentlymart-go-textseg-v13)))
+    (home-page "https://github.com/zclconf/go-cty")
+    (synopsis "Type system for dynamic values in Go applications")
+    (description
+      "@code{cty} (pronounced \"see-tie\") is a dynamic type system for
+applications written in Go that need to represent user-supplied values without
+losing type information.  The primary intended use is for implementing
+configuration languages, but other uses may be possible too.")
+    (license license:expat)))
-- 
2.34.0

